<?php

use App\Models\Category;
use App\Models\ProductMovement;
use Carbon\Carbon;
use Tests\TestCase;

class ProductMovementOrmTest extends TestCase
{
    public function testCanBuildProductMovement(): ProductMovement
    {
        $now = Carbon::parse('now')->toDateTime();
        $product_movement = new ProductMovement([
            'id' => 1,
            'user_id' => 1,
            'product_id' => 1,
            'direction' => '0',
            'quantity' => 10,
            'created_at' => $now
        ]);

        $this->assertTrue($product_movement->getId() == 1);
        $this->assertTrue($product_movement->getUserId() == 1);
        $this->assertTrue($product_movement->getProductId() == 1);
        $this->assertTrue($product_movement->isDirection(0));
        $this->assertTrue($product_movement->getQuantity() == 10);
        $this->assertEqualsWithDelta($product_movement->getCreatedAt()->format('Y-m-d H:i:s'), $now->format('Y-m-d H:i:s'), 1, '');
        return $product_movement;
    }

    /**
     * @depends testCanBuildProductMovement
     * @param ProductMovement $product_movement
     * @return ProductMovement
     */
    public function testCanPersist(ProductMovement $product_movement): ProductMovement
    {
        $this->expectNotToPerformAssertions();
        ProductMovement::persist($product_movement);

        return $product_movement;
    }

    /**
     * @depends testCanPersist
     * @param ProductMovement $product_movement
     * @return void
     */
    public function testCanFind(ProductMovement $product_movement)
    {
        $found_product_movement = ProductMovement::where('id', $product_movement->getId())->first();
        $this->assertTrue($product_movement->getId() == $found_product_movement->getId());
        $this->assertTrue($product_movement->getUserId() == $found_product_movement->getUserId());
        $this->assertTrue($product_movement->getProductId() == $found_product_movement->getProductId());
        $this->assertTrue($product_movement->getDirection() == $found_product_movement->getDirection());
        $this->assertTrue($product_movement->getQuantity() == $found_product_movement->getQuantity());
        $this->assertEqualsWithDelta($product_movement->getCreatedAt()->format('Y-m-d H:i:s'), $found_product_movement->getCreatedAt()->format('Y-m-d H:i:s'), 1, '');

        $found_product_movement->delete();

    }
    protected function setUp(): void
    {
        parent::setUp();
        Schema::disableForeignKeyConstraints();
    }

    protected function tearDown(): void
    {
        Schema::enableForeignKeyConstraints();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
