<?php
use App\Models\User;
use Carbon\Carbon;
use Tests\TestCase;

class UserOrmTest extends TestCase {

    public function testCanBuildUser(): User
    {
        $now = Carbon::parse('now')->toDateTime();
        User::factory()->definition();
        $user = new User([
            'id' => 1,
            'name' => 'John Doe',
            'email' => 'test@mail.com',
            'password' => 'testPassword',
        ]);
//            'id' => 1,
//            'name' => 'John Doe',
//            'email' => 'test@mail.com',
//            'password' => 'testPassword',
//            'remember_token' => null,
//            'soft_deleted' => false,
//            'created_at' => $now,
//            'updated_at' => $now,
//            'image' => '',
//            'email_verified_at' => $now
//        ]);

        print($user);

        $this->assertTrue($user->getId() == 1);
        $this->assertTrue($user->getName() == 'John Doe');
        $this->assertTrue($user->getEmail() == 'test@mail.com');
        $this->assertTrue($user->getPassword() == 'testPassword');
        $this->assertTrue($user->getRememberToken() == null);
        $this->assertTrue($user->isSoftDeleted() == false);
        $this->assertTrue($user->getImage() == '');
        $this->assertEqualsWithDelta($user->getCreatedAt()->format('Y-m-d H:i:s'), $now->format('Y-m-d H:i:s'), 1, '');
        $this->assertEqualsWithDelta($user->getUpdatedAt()->format('Y-m-d H:i:s'), $now->format('Y-m-d H:i:s'), 1, '');
        $this->assertEqualsWithDelta($user->getEmailVerifiedAt()->format('Y-m-d H:i:s'), $now->format('Y-m-d H:i:s'), 1, '');
        return $user;
    }

    /**
     * @depends testCanBuildUser
     * @param User $user
     * @return User
     */
    public function testCanPersist(User $user): User
    {
        $this->expectNotToPerformAssertions();
        User::persist($user);

        return $user;
    }

    /**
     * @depends testCanPersist
     * @param User $user
     * @return void
     */
    public function testCanFind(User $user): void
    {
        $found_user = User::where('id', $user->getId())->first();
        $this->assertTrue($user->getId() == $found_user->getId());
        $this->assertTrue($user->getName() == $found_user->getName());
        $this->assertTrue($user->getEmail() == $found_user->getEmail());
        $this->assertTrue($user->getPassword() == $found_user->getPassword());
        $this->assertTrue($user->getRememberToken() == $found_user->getRememberToken());
        $this->assertTrue($user->getImage() == $found_user->getImage());
        $this->assertTrue($user->isSoftDeleted() == $found_user->isSoftDeleted());
        $this->assertEqualsWithDelta($user->getCreatedAt()->format('Y-m-d H:i:s'), $found_user->getCreatedAt()->format('Y-m-d H:i:s'), 1, '');
        $this->assertEqualsWithDelta($user->getUpdatedAt()->format('Y-m-d H:i:s'), $found_user->getUpdatedAt()->format('Y-m-d H:i:s'), 1, '');
        $this->assertEqualsWithDelta($user->getEmailVerifiedAt()->format('Y-m-d H:i:s'), $found_user->getEmailVerifiedAt()->format('Y-m-d H:i:s'), 1, '');

        $found_user->delete();

    }

    protected function setUp(): void
    {
        parent::setUp();
        Schema::disableForeignKeyConstraints();
    }

    protected function tearDown(): void
    {
        Schema::enableForeignKeyConstraints();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
