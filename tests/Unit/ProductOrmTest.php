<?php

use App\Models\Product;
use Carbon\Carbon;
use Tests\TestCase;
class ProductOrmTest extends TestCase
{

    public function testCanBuildCategory(): Product
    {
        $now = Carbon::parse('now')->toDateTime();
        $product = new Product([
            'id' => 1,
            'name' => 'dummy product',
            'unit_price' => 1000,
            'shop_id' => 1,
            'image' => '',
            'created_at' => $now
        ]);
        $this->assertTrue($product->getId() == 1);
        $this->assertTrue($product->getShopId() == 1);
        $this->assertTrue($product->getName() == 'dummy product');
        $this->assertTrue($product->getImage() == '');
        $this->assertTrue($product->getUnitPrice() == 1000);
        $this->assertEqualsWithDelta($product->getCreatedAt()->format('Y-m-d H:i:s'), $now->format('Y-m-d H:i:s'), 1, '');
        return $product;
    }

    /**
     * @depends testCanBuildCategory
     * @param Product $product
     * @return Product
     */
    public function testCanPersist(Product $product): Product
    {
        $this->expectNotToPerformAssertions();
        Product::persist($product);

        return $product;
    }

    /**
     * @depends testCanPersist
     * @param Product $product
     * @return void
     */
    public function testCanFind(Product $product)
    {
        $found_product = Product::where('id', $product->getId())->first();
        $this->assertTrue($product->getId() == $found_product->getId());
        $this->assertTrue($product->getShopId() == $found_product->getShopId());
        $this->assertTrue($product->getName() == $found_product->getName());
        $this->assertTrue($product->getImage() == $found_product->getImage());
        $this->assertTrue($product->getUnitPrice() == $found_product->getUnitPrice());
        $this->assertEqualsWithDelta($product->getCreatedAt()->format('Y-m-d H:i:s'), $found_product->getCreatedAt()->format('Y-m-d H:i:s'), 1, '');

        $found_product->delete();

    }
    protected function setUp(): void
    {
        parent::setUp();
        Schema::disableForeignKeyConstraints();
    }

    protected function tearDown(): void
    {
        Schema::enableForeignKeyConstraints();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
